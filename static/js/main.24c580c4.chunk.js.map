{"version":3,"sources":["components/Track/Track.tsx","components/TrackList/TrackList.tsx","components/Playlist/Playlist.tsx","components/SearchResults/SearchResults.tsx","components/SearchBar/SearchBar.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Track","props","className","track","name","artist","album","onClick","e","isRemoval","id","onRemove","onAdd","addTrack","TrackList","trackList","map","Playlist","defaultValue","onChange","onNameChange","target","value","playlistTracks","onSave","SearchResults","searchResults","SearchBar","placeholder","onSearch","App","useState","playlistName","setPlaylistName","setPlaylistTracks","searchTerm","console","log","search","filter","playlistTrack","length","removeTrack","tracks","generatePlaylistURIOnSave","require","config","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24c580c4.chunk.js","sourcesContent":["import React from 'react';\nimport './Track.css';\nimport { ITrack } from '../../Interfaces/ITrack';\n\ninterface ITrackComponent {\n    track: ITrack;\n    isRemoval: boolean;\n\n    onRemove?: (track: ITrack) => void;\n\n    onAdd?: (track: ITrack) => void;\n}\n\nexport default function Track(props: ITrackComponent) {\n    function addTrack(track: ITrack) {\n        if (props.onAdd) {\n            props.onAdd(track);\n        }\n    }\n\n    function onRemove(track: ITrack) {\n        if (props.onRemove) {\n            props.onRemove(track);\n        }\n    }\n\n    function renderAction() {\n        if (props.isRemoval) {\n            return '-';\n        }\n        return '+';\n    }\n\n    return (\n        <div className=\"Track\" key={props.track.id}>\n            <div className=\"Track-information\">\n                <h3>{props.track.name}</h3>\n                <p>\n                    {props.track.artist} | {props.track.album}\n                </p>\n            </div>\n            <button\n                className=\"Track-action\"\n                onClick={(e) => {\n                    if (props.isRemoval) {\n                        onRemove({\n                            id: props.track.id,\n                            name: props.track.name,\n                            artist: props.track.artist,\n                            album: props.track.album,\n                        });\n                    } else {\n                        addTrack({\n                            id: props.track.id,\n                            name: props.track.name,\n                            artist: props.track.artist,\n                            album: props.track.album,\n                        });\n                    }\n                }}\n            >\n                {renderAction()}\n            </button>\n        </div>\n    );\n}\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\nimport { ITrack } from '../../Interfaces/ITrack';\n\ninterface ITrackList {\n    trackList: ITrack[];\n    isRemoval: boolean;\n\n    onRemove?: (track: ITrack) => void;\n\n    onAdd?: (track: ITrack) => void;\n}\n\nexport default function TrackList(props: ITrackList) {\n    return (\n        <div className=\"TrackList\">\n            {props.trackList.map((track) => {\n                return (\n                    <Track\n                        track={track}\n                        onAdd={(track) => {\n                            if (props.onAdd) {\n                                props.onAdd(track);\n                            }\n                        }}\n                        onRemove={(track) => {\n                            if (props.onRemove) {\n                                props.onRemove(track);\n                            }\n                        }}\n                        isRemoval={props.isRemoval}\n                    />\n                );\n            })}\n        </div>\n    );\n}\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\nimport { ITrack } from '../../Interfaces/ITrack';\n\ninterface IPlaylist {\n    playlistName: string;\n    playlistTracks: ITrack[];\n    onNameChange: (name: string) => void;\n\n    onSave(tracks: ITrack[]): void;\n\n    onRemove(track: ITrack): void;\n}\n\nexport default function Playlist(props: IPlaylist) {\n    return (\n        <div className=\"Playlist\">\n            <input\n                name={'Playlist Name'}\n                defaultValue={'New Playlist'}\n                onChange={(e) => {\n                    props.onNameChange(e.target.value);\n                }}\n            />\n            <TrackList trackList={props.playlistTracks} onRemove={(track) => props.onRemove(track)} isRemoval={true} />\n            <button className=\"Playlist-save\" onClick={() => props.onSave(props.playlistTracks)}>\n                {' '}\n                SAVE TO SPOTIFY\n            </button>\n        </div>\n    );\n}\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\nimport { ITrack } from '../../Interfaces/ITrack';\n\ninterface ISearchResults {\n    searchResults: ITrack[];\n\n    onAdd(track: ITrack): void;\n}\n\nexport default function SearchResults(props: ISearchResults) {\n    return (\n        <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList\n                isRemoval={false}\n                trackList={props.searchResults}\n                onAdd={(track) => {\n                    props.onAdd(track);\n                }}\n            />\n        </div>\n    );\n}\n","import React from 'react';\nimport './SearchBar.css';\n\ninterface ISearchBar {\n    onSearch(searchTerm: string): void;\n}\n\nexport default function SearchBar(props: ISearchBar) {\n    return (\n        <div className=\"SearchBar\">\n            <input\n                placeholder=\"Enter A Song, Album, or Artist\"\n                onChange={(e) => {\n                    props.onSearch(e.target.value);\n                }}\n            />\n            <button className=\"SearchButton\">SEARCH</button>\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchResults from '../SearchResults/SearchResults';\nimport SearchBar from '../SearchBar/SearchBar';\nimport { ITrack } from '../../Interfaces/ITrack';\n\nrequire('dotenv').config();\n\nexport default function App() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [searchResults, setSearchResults] = useState<ITrack[]>([\n        { name: 'Blue Side (Outro)', artist: 'j-hope', album: 'Hope World', id: '1Blue' },\n    ]);\n    const [playlistName, setPlaylistName] = useState<string>('Just for fun');\n    const [playlistTracks, setPlaylistTracks] = useState<ITrack[]>([\n        {\n            name: 'My Universe',\n            artist: 'Coldplay',\n            album: 'My Universe',\n            id: '1MyUni',\n        },\n    ]);\n    const addTrack = (track: ITrack) => {\n        if (playlistTracks.filter((playlistTrack) => playlistTrack.id === track.id).length === 0) {\n            setPlaylistTracks([...playlistTracks, track]);\n        }\n    };\n    const removeTrack = (track: ITrack) => {\n        setPlaylistTracks(playlistTracks.filter((playlistTrack) => playlistTrack.id !== track.id));\n    };\n\n    const generatePlaylistURIOnSave = (tracks: ITrack[]): string[] => {\n        return tracks.map((track: ITrack) => `spotify:track:${track.id}`);\n    };\n\n    const search = (searchTerm: string) => {\n        console.log(searchTerm);\n    };\n\n    return (\n        <div>\n            <h1>\n                <span className=\"highlight\">Spotify Fun</span>\n            </h1>\n            <div className=\"App\">\n                <SearchBar onSearch={(searchTerm) => search(searchTerm)} />\n                <div className=\"App-playlist\">\n                    <SearchResults\n                        searchResults={searchResults}\n                        onAdd={(track) => {\n                            addTrack(track);\n                        }}\n                    />\n                    <Playlist\n                        playlistName={playlistName}\n                        playlistTracks={playlistTracks}\n                        onNameChange={(name) => {\n                            setPlaylistName(name);\n                        }}\n                        onRemove={(track) => {\n                            removeTrack(track);\n                        }}\n                        onSave={(tracks) => {\n                            generatePlaylistURIOnSave(tracks);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals(console.log);\n"],"sourceRoot":""}