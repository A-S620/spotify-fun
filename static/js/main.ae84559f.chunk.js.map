{"version":3,"sources":["components/Track/Track.tsx","components/TrackList/TrackList.tsx","components/AnalysisDailog/AnalysisDialog.tsx","components/Playlist/Playlist.tsx","components/SearchResults/SearchResults.tsx","components/SearchBar/SearchBar.tsx","middleware/Clients/AuthClient.tsx","Config.tsx","middleware/Clients/SearchClient.tsx","components/App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["Track","props","className","track","name","artists","album","onClick","e","isRemoval","id","onRemove","onAdd","addTrack","TrackList","trackList","map","Transition","React","ref","Slide","direction","AnalysisDialog","open","setOpen","handleClose","Dialog","TransitionComponent","keepMounted","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","Button","Playlist","playlistTracks","SearchResults","searchResults","SearchBar","useState","searchTerm","setSearchTerm","placeholder","onChange","target","value","onSearch","AuthClient","accessToken","expiresIn","getAccessToken","clientId","clientSecret","a","headers","Accept","auth","username","password","data","grant_type","axios","post","qs","stringify","response","access_token","errorResponseData","Error","error","error_description","Config","spotifyClientId","process","spotifyClientSecret","SearchClient","artistsArray","forEach","artist","push","Object","entries","filter","entry","App","setSearchResults","setAccessToken","tokenIsFetched","setTokenIsFetched","playlistName","setPlaylistName","setPlaylistTracks","useEffect","fetchAccessToken","window","setTimeout","reset","catch","console","warn","search","searchTracks","results","getFromResponseAsArrayOfITrack","playlistTrack","length","onNameChange","removeTrack","onSave","tracks","generatePlaylistURIOnSave","limit","get","Authorization","status","message","responseData","tracksArray","keys","includes","tracksObject","item","songId","getArtists","albumObject","trackToAdd","require","config","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","log"],"mappings":"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","file":"static/js/main.ae84559f.chunk.js","sourcesContent":["import React from 'react';\nimport './Track.css';\nimport { ITrack } from '../../Interfaces/ITrack';\n\ninterface ITrackComponent {\n    track: ITrack;\n    isRemoval: boolean;\n\n    onRemove?: (track: ITrack) => void;\n\n    onAdd?: (track: ITrack) => void;\n}\n\nexport default function Track(props: ITrackComponent) {\n    function addTrack(track: ITrack) {\n        if (props.onAdd) {\n            props.onAdd(track);\n        }\n    }\n\n    function onRemove(track: ITrack) {\n        if (props.onRemove) {\n            props.onRemove(track);\n        }\n    }\n\n    function renderAction() {\n        if (props.isRemoval) {\n            return '-';\n        }\n        return '+';\n    }\n\n    return (\n        <div className=\"Track\" key={props.track.id}>\n            <div className=\"Track-information\">\n                <h3>{props.track.name}</h3>\n                <p>\n                    {props.track.artists} | {props.track.album}\n                </p>\n            </div>\n            <button\n                className=\"Track-action\"\n                onClick={(e) => {\n                    if (props.isRemoval) {\n                        onRemove({\n                            id: props.track.id,\n                            name: props.track.name,\n                            artists: props.track.artists,\n                            album: props.track.album,\n                        });\n                    } else {\n                        addTrack({\n                            id: props.track.id,\n                            name: props.track.name,\n                            artists: props.track.artists,\n                            album: props.track.album,\n                        });\n                    }\n                }}\n            >\n                {renderAction()}\n            </button>\n        </div>\n    );\n}\n","import React from 'react';\nimport './TrackList.css';\nimport Track from '../Track/Track';\nimport { ITrack } from '../../Interfaces/ITrack';\n\ninterface ITrackList {\n    trackList: ITrack[];\n    isRemoval: boolean;\n\n    onRemove?: (track: ITrack) => void;\n\n    onAdd?: (track: ITrack) => void;\n}\n\nexport default function TrackList(props: ITrackList) {\n    return (\n        <div className=\"TrackList\">\n            {props.trackList.map((track) => {\n                return (\n                    <Track\n                        track={track}\n                        onAdd={(track) => {\n                            if (props.onAdd) {\n                                props.onAdd(track);\n                            }\n                        }}\n                        onRemove={(track) => {\n                            if (props.onRemove) {\n                                props.onRemove(track);\n                            }\n                        }}\n                        isRemoval={props.isRemoval}\n                    />\n                );\n            })}\n        </div>\n    );\n}\n","import * as React from 'react';\nimport './AnalysisDialog.css';\nimport Button from '@mui/material/Button';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport Slide from '@mui/material/Slide';\nimport { TransitionProps } from '@mui/material/transitions';\n\nconst Transition = React.forwardRef(function Transition(\n    props: TransitionProps & {\n        children: React.ReactElement<any, any>;\n    },\n    ref: React.Ref<unknown>\n) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function AnalysisDialog() {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    return (\n        <div>\n            <button onClick={handleClickOpen} className={'AnalysisDialog-save'}>\n                {' '}\n                ANALYSE SONGS\n            </button>\n            <Dialog\n                open={open}\n                TransitionComponent={Transition}\n                keepMounted\n                onClose={handleClose}\n                aria-describedby=\"alert-dialog-slide-description\"\n            >\n                <DialogTitle>{\"Use Google's location service?\"}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText id=\"alert-dialog-slide-description\">\n                        Let Google help apps determine location. This means sending anonymous location data to Google,\n                        even when no apps are running.\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose}>Disagree</Button>\n                    <Button onClick={handleClose}>Agree</Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React from 'react';\nimport './Playlist.css';\nimport TrackList from '../TrackList/TrackList';\nimport { ITrack } from '../../Interfaces/ITrack';\nimport AnalysisDialog from '../AnalysisDailog/AnalysisDialog';\n\ninterface IPlaylist {\n    playlistName: string;\n    playlistTracks: ITrack[];\n    onNameChange: (name: string) => void;\n\n    onSave(tracks: ITrack[]): void;\n\n    onRemove(track: ITrack): void;\n}\n\nexport default function Playlist(props: IPlaylist) {\n    return (\n        <div className=\"Playlist\">\n            <h2>Songs to Analyse</h2>\n            <TrackList trackList={props.playlistTracks} onRemove={(track) => props.onRemove(track)} isRemoval={true} />\n            {/*<button className=\"Playlist-save\" onClick={() => props.onSave(props.playlistTracks)}>*/}\n            {/*    {' '}*/}\n            {/*    ANALYSE SONGS*/}\n            {/*</button>*/}\n            <AnalysisDialog />\n        </div>\n    );\n}\n","import React from 'react';\nimport './SearchResults.css';\nimport TrackList from '../TrackList/TrackList';\nimport { ITrack } from '../../Interfaces/ITrack';\n\ninterface ISearchResults {\n    searchResults: ITrack[];\n\n    onAdd(track: ITrack): void;\n}\n\nexport default function SearchResults(props: ISearchResults) {\n    return (\n        <div className=\"SearchResults\">\n            <h2>Results</h2>\n            <TrackList\n                isRemoval={false}\n                trackList={props.searchResults}\n                onAdd={(track) => {\n                    props.onAdd(track);\n                }}\n            />\n        </div>\n    );\n}\n","import React, { useState } from 'react';\nimport './SearchBar.css';\n\ninterface ISearchBar {\n    onSearch(searchTerm: string): void;\n}\n\nexport default function SearchBar(props: ISearchBar) {\n    const [searchTerm, setSearchTerm] = useState<string>('');\n    return (\n        <div className=\"SearchBar\">\n            <input\n                placeholder=\"Enter A Song, Album, or Artist\"\n                onChange={(e) => {\n                    setSearchTerm(e.target.value);\n                }}\n            />\n            <button\n                className=\"SearchButton\"\n                onClick={() => {\n                    props.onSearch(searchTerm);\n                }}\n            >\n                SEARCH\n            </button>\n        </div>\n    );\n}\n","import axios from 'axios';\nimport qs from 'qs';\n\nexport default class AuthClient {\n    static accessToken: string;\n    static expiresIn: number;\n    static getAccessToken = async (clientId: string, clientSecret: string) => {\n        const headers = {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n            auth: {\n                username: clientId,\n                password: clientSecret,\n            },\n        };\n        const data = {\n            grant_type: 'client_credentials',\n        };\n\n        try {\n            const response = await axios.post('https://accounts.spotify.com/api/token', qs.stringify(data), headers);\n            AuthClient.accessToken = response.data.access_token;\n            AuthClient.expiresIn = response.data.expiresIn;\n        } catch (error) {\n            const { response }: any = error;\n            if (response) {\n                const errorResponseData = response.data as { error: string; error_description: string };\n                return new Error(`${errorResponseData.error}: ${errorResponseData.error_description}`);\n            }\n            return new Error('Request Failed');\n        }\n    };\n\n    static reset() {\n        AuthClient.accessToken = '';\n        AuthClient.expiresIn = 0;\n    }\n}\n","export class Config {\n    static spotifyClientId = process.env.REACT_APP_SPOTIFY_CLIENT_ID ? process.env.REACT_APP_SPOTIFY_CLIENT_ID : '';\n    static spotifyClientSecret = process.env.REACT_APP_SPOTIFY_CLIENT_SECRET\n        ? process.env.REACT_APP_SPOTIFY_CLIENT_SECRET\n        : '';\n}\n","import axios from 'axios';\nimport { ITrack } from '../../Interfaces/ITrack';\n\nexport default class SearchClient {\n    static searchTracks = async (searchTerm: string, accessToken: string, limit?: number) => {\n        try {\n            const response = await axios.get(`https://api.spotify.com/v1/search?type=track&q=${searchTerm}`, {\n                headers: {\n                    Accept: 'application/json',\n                    Authorization: 'Bearer ' + accessToken,\n                    'Content-Type': 'application/json',\n                },\n            });\n            return response.data;\n        } catch (error) {\n            const { response }: any = error;\n            if (response) {\n                const errorResponseData = response.data.error as { status: number; message: string };\n                return new Error(`${errorResponseData.status}: ${errorResponseData.message}`);\n            }\n            return new Error('Request Failed');\n        }\n    };\n\n    private static getArtists(artists: Array<object>): Array<string> {\n        let artistsArray: Array<string> = [];\n        artists.forEach((artist: object) => {\n            artistsArray.push(Object.entries(artist).filter((entry) => entry[0] === 'name')[0][1] as string);\n        });\n        return artistsArray;\n    }\n\n    static getFromResponseAsArrayOfITrack = (responseData: object): Array<ITrack> => {\n        let tracksArray: Array<ITrack> = [];\n        if (Object.keys(responseData).includes('tracks')) {\n            const tracksObject = Object.entries(responseData).filter((entry) => entry[0] === 'tracks')[0][1];\n            if (Object.keys(tracksObject).includes('items')) {\n                const itemsArrayInTracksObject = Object.entries(tracksObject).filter(\n                    (entry) => entry[0] === 'items'\n                )[0][1] as Array<object>;\n                itemsArrayInTracksObject.forEach((item: object) => {\n                    const songId = Object.entries(item).filter((entry) => entry[0] === 'id')[0][1] as string;\n                    const name = Object.entries(item).filter((entry) => entry[0] === 'name')[0][1] as string;\n                    const artists = Object.entries(item).filter(\n                        (entry) => entry[0] === 'artists'\n                    )[0][1] as Array<object>;\n                    let artistsArray: Array<string> = this.getArtists(artists);\n                    const albumObject = Object.entries(item).filter((entry) => entry[0] === 'album')[0][1] as object;\n                    let albumName: string = Object.entries(albumObject).filter(\n                        (entry) => entry[0] === 'name'\n                    )[0][1] as string;\n                    const trackToAdd: ITrack = {\n                        id: songId,\n                        name: name,\n                        artists: artistsArray,\n                        album: albumName,\n                    };\n                    tracksArray.push(trackToAdd);\n                });\n            }\n        }\n        return tracksArray;\n    };\n}\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Playlist from '../Playlist/Playlist';\nimport SearchResults from '../SearchResults/SearchResults';\nimport SearchBar from '../SearchBar/SearchBar';\nimport { ITrack } from '../../Interfaces/ITrack';\nimport AuthClient from '../../middleware/Clients/AuthClient';\nimport { Config } from '../../Config';\nimport SearchClient from '../../middleware/Clients/SearchClient';\n\nrequire('dotenv').config();\n\nexport default function App() {\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const [searchResults, setSearchResults] = useState<ITrack[]>([]);\n    const [accessToken, setAccessToken] = useState<string>('');\n    const [tokenIsFetched, setTokenIsFetched] = useState<boolean>(false);\n    const [playlistName, setPlaylistName] = useState<string>('Just for fun');\n    const [playlistTracks, setPlaylistTracks] = useState<ITrack[]>([]);\n    useEffect(() => {\n        if (!tokenIsFetched) {\n            fetchAccessToken();\n            window.setTimeout(() => {\n                setAccessToken('');\n                AuthClient.reset();\n                setTokenIsFetched(false);\n            }, AuthClient.expiresIn * 1000);\n        }\n    });\n    const fetchAccessToken = async () => {\n        await AuthClient.getAccessToken(Config.spotifyClientId, Config.spotifyClientSecret).catch((error: Error) =>\n            console.warn(error)\n        );\n        setAccessToken(AuthClient.accessToken);\n        setTokenIsFetched(true);\n    };\n    const addTrack = (track: ITrack) => {\n        if (playlistTracks.filter((playlistTrack) => playlistTrack.id === track.id).length === 0) {\n            setPlaylistTracks([...playlistTracks, track]);\n        }\n    };\n    const removeTrack = (track: ITrack) => {\n        setPlaylistTracks(playlistTracks.filter((playlistTrack) => playlistTrack.id !== track.id));\n    };\n\n    const generatePlaylistURIOnSave = (tracks: ITrack[]): string[] => {\n        return tracks.map((track: ITrack) => `spotify:track:${track.id}`);\n    };\n\n    const search = async (searchTerm: string) => {\n        const response = await SearchClient.searchTracks(searchTerm, accessToken);\n        const results = SearchClient.getFromResponseAsArrayOfITrack(response);\n        setSearchResults(results);\n    };\n\n    return (\n        <div>\n            <h1>\n                <span className=\"highlight\">Spotify Fun</span>\n            </h1>\n            <div className=\"App\">\n                <SearchBar onSearch={(searchTerm) => search(searchTerm)} />\n                <div className=\"App-playlist\">\n                    <SearchResults\n                        searchResults={searchResults}\n                        onAdd={(track) => {\n                            addTrack(track);\n                        }}\n                    />\n                    <Playlist\n                        playlistName={playlistName}\n                        playlistTracks={playlistTracks}\n                        onNameChange={(name) => {\n                            setPlaylistName(name);\n                        }}\n                        onRemove={(track) => {\n                            removeTrack(track);\n                        }}\n                        onSave={(tracks) => {\n                            generatePlaylistURIOnSave(tracks);\n                        }}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\nreportWebVitals(console.log);\n"],"sourceRoot":""}